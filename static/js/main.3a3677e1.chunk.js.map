{"version":3,"sources":["utils/getWeb3.js","components/header.js","app/App.js","utils/serviceWorker.js","index.js"],"names":["getWeb3","Promise","resolve","reject","window","addEventListener","a","ethereum","web3","Web3","enable","console","log","provider","providers","HttpProvider","status","0","1","Header","adminButton","onClick","address","id","style","position","float","props","account","owner","this","Component","App","state","accounts","contract","componentDidMount","eth","getAccounts","net","getId","networkId","deployedNetwork","VotingContract","networks","instance","Contract","abi","methods","call","workflowStatus","setState","alert","error","componentDidUpdate","on","className","Boolean","location","hostname","match","ReactDOM","render","document","getElementById"],"mappings":"ooBAqCeA,EAnCC,kBACd,IAAIC,SAAQ,SAACC,EAASC,GAEpBC,OAAOC,iBAAiB,OAAxB,sBAAgC,kCAAAC,EAAA,0DAE1BF,OAAOG,SAFmB,wBAGtBC,EAAO,IAAIC,IAAKL,OAAOG,UAHD,kBAMpBH,OAAOG,SAASG,SANI,OAQ1BR,EAAQM,GARkB,gDAU1BL,EAAO,EAAD,IAVoB,gCAcrBC,OAAOI,MAERA,EAAOJ,OAAOI,KACpBG,QAAQC,IAAI,2BACZV,EAAQM,KAIFK,EAAW,IAAIJ,IAAKK,UAAUC,aAClC,yBAEIP,EAAO,IAAIC,IAAKI,GACtBF,QAAQC,IAAI,gDACZV,EAAQM,IA3BoB,8DCA9BQ,G,cAAS,CACdC,EAAG,sBACHC,EAAG,sBAwCWC,E,2MAnCdC,YAAc,WACb,OACC,4BAAQC,QAAS,kBAAMV,QAAQC,IAAI,iBAAnC,U,EAIDU,QAAU,WACT,OACC,yBAAKC,GAAG,UAAUC,MAAO,CAAEC,SAAU,aACpC,uBAAGD,MAAO,CAACE,MAAO,SAAU,EAAKC,MAAMC,SACtC,EAAKD,MAAMC,UAAY,EAAKD,MAAME,MAAQ,EAAKT,cAAgB,O,EAKpEJ,OAAS,WAER,OADAL,QAAQC,IAAII,EAAO,EAAKW,MAAMX,SAE7B,yBAAKO,GAAG,WACP,2BAAI,EAAKI,MAAMX,OAAf,MAA0BA,EAAO,EAAKW,MAAMX,W,wEAO9C,OADAL,QAAQC,IAAIkB,KAAKH,MAAME,OAEtB,yBAAKN,GAAG,UACNO,KAAKd,SACLc,KAAKR,e,GA/BWS,aCmENC,E,2MApEbC,MAAQ,CACNzB,KAAM,KACN0B,SAAU,KACVC,SAAU,KACVN,MAAO,KACPb,OAAQ,M,EAGVoB,kB,sBAAoB,wCAAA9B,EAAA,+EAIGN,IAJH,cAIVQ,EAJU,gBAOOA,EAAK6B,IAAIC,cAPhB,cAOVJ,EAPU,gBAUQ1B,EAAK6B,IAAIE,IAAIC,QAVrB,cAUVC,EAVU,OAWVC,EAAkBC,EAAeC,SAASH,GAC1CI,EAAW,IAAIrC,EAAK6B,IAAIS,SAC5BH,EAAeI,IACfL,GAAmBA,EAAgBpB,SAdrB,UAkBIuB,EAASG,QAAQnB,QAAQoB,OAlB7B,eAkBVpB,EAlBU,iBAoBKgB,EAASG,QAAQE,iBAAiBD,OApBvC,QAoBVjC,EApBU,OAqBhBL,QAAQC,IAAII,GAIZ,EAAKmC,SAAS,CAAE3C,OAAM0B,WAAUC,SAAUU,EAAUhB,QAAOb,WAzB3C,kDA4BhBoC,MAAM,0EAGJzC,QAAQ0C,MAAR,MA/Bc,0D,EAmCpBC,mB,sBAAqB,sBAAAhD,EAAA,sDAEnBF,OAAOG,SAASgD,GAAG,kBAAnB,sBAAsC,4BAAAjD,EAAA,sEACb,EAAK2B,MAAMzB,KAAK6B,IAAIC,cADP,OAC9BJ,EAD8B,OAEpC,EAAKiB,SAAS,CAACjB,aAFqB,4CAFnB,2C,wEASnB,OAAKJ,KAAKG,MAAMzB,KAId,yBAAKgD,UAAU,OACb,kBAAC,EAAD,CACE5B,QAASE,KAAKG,MAAMC,SAAS,GAC7BL,MAAOC,KAAKG,MAAMJ,MAClBb,OAAQc,KAAKG,MAAMjB,UAPhB,4E,GAtDKe,aCIE0B,QACW,cAA7BrD,OAAOsD,SAASC,UAEe,UAA7BvD,OAAOsD,SAASC,UAEhBvD,OAAOsD,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,U","file":"static/js/main.3a3677e1.chunk.js","sourcesContent":["import Web3 from \"web3\";\n\nconst getWeb3 = () =>\n  new Promise((resolve, reject) => {\n    // Wait for loading completion to avoid race conditions with web3 injection timing.\n    window.addEventListener(\"load\", async () => {\n      // Modern dapp browsers...\n      if (window.ethereum) {\n        const web3 = new Web3(window.ethereum);\n        try {\n          // Request account access if needed\n          await window.ethereum.enable();\n          // Accounts now exposed\n          resolve(web3);\n        } catch (error) {\n          reject(error);\n        }\n      }\n      // Legacy dapp browsers...\n      else if (window.web3) {\n        // Use Mist/MetaMask's provider.\n        const web3 = window.web3;\n        console.log(\"Injected web3 detected.\");\n        resolve(web3);\n      }\n      // Fallback to localhost; use dev console port by default...\n      else {\n        const provider = new Web3.providers.HttpProvider(\n          \"http://127.0.0.1:8545\"\n        );\n        const web3 = new Web3(provider);\n        console.log(\"No web3 instance injected, using Local web3.\");\n        resolve(web3);\n      }\n    });\n  });\n\nexport default getWeb3;\n","import React, { Component } from \"react\";\nimport VotingContract from \"../contracts/Voting.json\";\n\nimport \"./components.css\";\n\nconst status = {\n\t0: \"Registration Voters\",\n\t1: \"Proposals session\"\n}\n\nclass Header extends Component {\n\t\n\tadminButton = () => {\n\t\treturn (\n\t\t\t<button onClick={() => console.log(\"CLICK ADMIN\")}>Admin</button>\n\t\t\t)\n\t\t}\n\t\t\n\t\taddress = () => {\n\t\t\treturn (\n\t\t\t\t<div id=\"address\" style={{ position: \"relative\"}}>\n\t\t\t\t\t<p style={{float: \"left\"}}>{this.props.account}</p>\n\t\t\t\t\t{this.props.account === this.props.owner ? this.adminButton() : null}\n\t\t\t\t</div>\n\t\t)\n\t}\n\t\n\tstatus = () => {\n\t\tconsole.log(status[this.props.status]);\n\t\treturn (\n\t\t\t<div id=\"address\">\n\t\t\t\t<p>{this.props.status} : {status[this.props.status]}</p>\n\t\t\t</div>\n\t\t)\n\t}\n\t\n\trender() {\n\t\tconsole.log(this.props.owner);\n\t\treturn (\n\t\t\t<div id=\"header\">\n\t\t\t\t{this.status()}\n\t\t\t\t{this.address()}\n\t\t\t</div>\n\t\t)\n\t}\n}\n\nexport default Header;","import React, { Component } from \"react\";\nimport VotingContract from \"../contracts/Voting.json\";\nimport getWeb3 from \"../utils/getWeb3\";\n\nimport \"./App.css\";\nimport \"../components/header\"\nimport Header from \"../components/header\";\n\nclass App extends Component {\n  state = {\n    web3: null, \n    accounts: null, \n    contract: null,\n    owner: null,\n    status: null\n  }\n\n  componentDidMount = async () => {\n\n    try {\n      // Get network provider and web3 instance.\n      const web3 = await getWeb3();\n\n      // Use web3 to get the user's accounts.\n      const accounts = await web3.eth.getAccounts();\n\n      // Get the contract instance.\n      const networkId = await web3.eth.net.getId();\n      const deployedNetwork = VotingContract.networks[networkId];\n      const instance = new web3.eth.Contract(\n        VotingContract.abi,\n        deployedNetwork && deployedNetwork.address,\n      );\n      \n      //t: Get the owner of the contract\n      const owner = await instance.methods.owner().call();\n      //t: Get the status of the contract\n      const status = await instance.methods.workflowStatus().call();\n      console.log(status);\n\n      // Set web3, accounts, and contract to the state, and then proceed with an\n      // example of interacting with the contract's methods.\n      this.setState({ web3, accounts, contract: instance, owner, status});\n    } catch (error) {\n      // Catch any errors for any of the above operations.\n      alert(\n        `Failed to load web3, accounts, or contract. Check console for details.`,\n        );\n        console.error(error);\n    }\n  };\n\n  componentDidUpdate = async () => {\n    //t: Change state on change account in metamask\n    window.ethereum.on('accountsChanged', async () =>{\n      const accounts = await this.state.web3.eth.getAccounts();\n      this.setState({accounts});\n    });\n  }\n\n  render() {\n    if (!this.state.web3) {\n      return <div>Loading Web3, accounts, and contract...</div>;\n    }\n    return (\n      <div className=\"App\">\n        <Header \n          account={this.state.accounts[0]}\n          owner={this.state.owner}\n          status={this.state.status}\n        />\n      </div>\n\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './app/App';\nimport * as serviceWorker from './utils/serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n// serviceWorker.unregister();\n"],"sourceRoot":""}